// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SWP391API.Models;

#nullable disable

namespace SWP391API.Migrations
{
    [DbContext(typeof(InteriorConstructionQuotationSystemContext))]
    partial class InteriorConstructionQuotationSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SWP391API.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("article_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"), 1L, 1);

                    b.Property<int>("ArticleTypeId")
                        .HasColumnType("int")
                        .HasColumnName("article_type_id");

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<string>("Img")
                        .HasColumnType("ntext");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ArticleId");

                    b.HasIndex("ArticleTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("article", (string)null);
                });

            modelBuilder.Entity("SWP391API.Models.ArticleType", b =>
                {
                    b.Property<int>("ArticleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("article_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleTypeId"), 1L, 1);

                    b.Property<string>("ArticleTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("article_type_name");

                    b.HasKey("ArticleTypeId");

                    b.ToTable("article_types", (string)null);
                });

            modelBuilder.Entity("SWP391API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("SWP391API.Models.CompletedProject", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("location");

                    b.Property<string>("ProjectDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("project_description");

                    b.Property<string>("ProjectImage")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("project_image");

                    b.Property<string>("ProjectInformation")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("project_information");

                    b.Property<string>("ProjectResult")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("project_result");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("project_title");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<int>("StyleId")
                        .HasColumnType("int")
                        .HasColumnName("style_id");

                    b.Property<double>("SurfaceArea")
                        .HasColumnType("float")
                        .HasColumnName("surface_area");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ProjectId")
                        .HasName("PK__complete__BC799E1F43E8F264");

                    b.HasIndex("StyleId");

                    b.HasIndex("UserId");

                    b.ToTable("completedProject", (string)null);
                });

            modelBuilder.Entity("SWP391API.Models.ConstructionStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConstructionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("construction_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("construction_style", (string)null);
                });

            modelBuilder.Entity("SWP391API.Models.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("contract_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"), 1L, 1);

                    b.Property<string>("ContractStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("contract_status");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("QuotationId")
                        .HasColumnType("int")
                        .HasColumnName("quotation_id");

                    b.HasKey("ContractId");

                    b.HasIndex("QuotationId");

                    b.ToTable("contract", (string)null);
                });

            modelBuilder.Entity("SWP391API.Models.HomeStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("home_style", (string)null);
                });

            modelBuilder.Entity("SWP391API.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("Size")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("size");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("SWP391API.Models.ProductInProject", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("ProductId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProductInProject", (string)null);
                });

            modelBuilder.Entity("SWP391API.Models.Quotation", b =>
                {
                    b.Property<int>("QuotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quotation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuotationId"), 1L, 1);

                    b.Property<int?>("CeilingConstructId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("FloorConstructionId")
                        .HasColumnType("int")
                        .HasColumnName("floorConstructionId");

                    b.Property<double?>("Height")
                        .HasColumnType("float")
                        .HasColumnName("height");

                    b.Property<int?>("HomeStyleId")
                        .HasColumnType("int")
                        .HasColumnName("homeStyleId");

                    b.Property<double?>("Length")
                        .HasColumnType("float")
                        .HasColumnName("length");

                    b.Property<string>("QuotationStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("quotation_status");

                    b.Property<double?>("Square")
                        .HasColumnType("float")
                        .HasColumnName("square");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int?>("StyleId")
                        .HasColumnType("int")
                        .HasColumnName("style_id");

                    b.Property<double?>("TotalBill")
                        .HasColumnType("float")
                        .HasColumnName("totalBill");

                    b.Property<double?>("TotalConstructionCost")
                        .HasColumnType("float")
                        .HasColumnName("totalConstructionCost");

                    b.Property<double?>("TotalProductCost")
                        .HasColumnType("float")
                        .HasColumnName("totalProductCost");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int?>("WallConstructId")
                        .HasColumnType("int");

                    b.Property<double?>("Witdh")
                        .HasColumnType("float")
                        .HasColumnName("witdh");

                    b.HasKey("QuotationId");

                    b.HasIndex("CeilingConstructId");

                    b.HasIndex("FloorConstructionId");

                    b.HasIndex("HomeStyleId");

                    b.HasIndex("StyleId");

                    b.HasIndex("UserId");

                    b.HasIndex("WallConstructId");

                    b.ToTable("quotation", (string)null);
                });

            modelBuilder.Entity("SWP391API.Models.QuotationDetail", b =>
                {
                    b.Property<int>("QuotationDId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quotation_d_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuotationDId"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("QuotationId")
                        .HasColumnType("int")
                        .HasColumnName("quotation_id");

                    b.HasKey("QuotationDId")
                        .HasName("PK__quotatio__F90A1A865964317E");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuotationId");

                    b.ToTable("quotation_detail", (string)null);
                });

            modelBuilder.Entity("SWP391API.Models.QuotationTemp", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("quotation_temp", (string)null);
                });

            modelBuilder.Entity("SWP391API.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("SWP391API.Models.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("style", (string)null);
                });

            modelBuilder.Entity("SWP391API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("AvtUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("avt_url");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expireDate");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fullname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("status");

                    b.Property<string>("Token")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)")
                        .HasColumnName("token");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__user__AB6E6164D4A1A3A3")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex(new[] { "Username" }, "UQ__user__F3DBC572D3A3E3A3")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("SWP391API.Models.Article", b =>
                {
                    b.HasOne("SWP391API.Models.ArticleType", "ArticleType")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__article__article__6C190EBB");

                    b.HasOne("SWP391API.Models.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__article__user_id__6D0D32F4");

                    b.Navigation("ArticleType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWP391API.Models.CompletedProject", b =>
                {
                    b.HasOne("SWP391API.Models.Style", "Style")
                        .WithMany("CompletedProjects")
                        .HasForeignKey("StyleId")
                        .IsRequired()
                        .HasConstraintName("FK__completed__style__6E01572D");

                    b.HasOne("SWP391API.Models.User", "User")
                        .WithMany("CompletedProjects")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__completed__user___6EF57B66");

                    b.Navigation("Style");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWP391API.Models.Contract", b =>
                {
                    b.HasOne("SWP391API.Models.Quotation", "Quotation")
                        .WithMany("Contracts")
                        .HasForeignKey("QuotationId")
                        .HasConstraintName("FK__contract__quotat__6FE99F9F");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("SWP391API.Models.Product", b =>
                {
                    b.HasOne("SWP391API.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__product__categor__70DDC3D8");

                    b.HasOne("SWP391API.Models.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__product__user_id__71D1E811");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWP391API.Models.ProductInProject", b =>
                {
                    b.HasOne("SWP391API.Models.Product", "Product")
                        .WithMany("ProductInProjects")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductInProject_product");

                    b.HasOne("SWP391API.Models.CompletedProject", "Project")
                        .WithMany("ProductInProjects")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductInProject_completedProject");

                    b.Navigation("Product");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SWP391API.Models.Quotation", b =>
                {
                    b.HasOne("SWP391API.Models.ConstructionStyle", "CeilingConstruct")
                        .WithMany("QuotationCeilingConstructs")
                        .HasForeignKey("CeilingConstructId")
                        .HasConstraintName("FK_quotation_construction_CeilingConstructIdstyle");

                    b.HasOne("SWP391API.Models.ConstructionStyle", "FloorConstruction")
                        .WithMany("QuotationFloorConstructions")
                        .HasForeignKey("FloorConstructionId")
                        .HasConstraintName("FK_quotation_construction_floorConstructionIdstyle");

                    b.HasOne("SWP391API.Models.HomeStyle", "HomeStyle")
                        .WithMany("Quotations")
                        .HasForeignKey("HomeStyleId")
                        .HasConstraintName("FK_quotation_home_style");

                    b.HasOne("SWP391API.Models.Style", "Style")
                        .WithMany("Quotations")
                        .HasForeignKey("StyleId")
                        .HasConstraintName("FK_quotation_style");

                    b.HasOne("SWP391API.Models.User", "User")
                        .WithMany("Quotations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_quotation_user");

                    b.HasOne("SWP391API.Models.ConstructionStyle", "WallConstruct")
                        .WithMany("QuotationWallConstructs")
                        .HasForeignKey("WallConstructId")
                        .HasConstraintName("FK_quotation_construction_WallConstructIdstyle");

                    b.Navigation("CeilingConstruct");

                    b.Navigation("FloorConstruction");

                    b.Navigation("HomeStyle");

                    b.Navigation("Style");

                    b.Navigation("User");

                    b.Navigation("WallConstruct");
                });

            modelBuilder.Entity("SWP391API.Models.QuotationDetail", b =>
                {
                    b.HasOne("SWP391API.Models.Product", "Product")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__quotation__produ__440B1D61");

                    b.HasOne("SWP391API.Models.Quotation", "Quotation")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("QuotationId")
                        .HasConstraintName("FK_quotation_detail_quotation");

                    b.Navigation("Product");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("SWP391API.Models.QuotationTemp", b =>
                {
                    b.HasOne("SWP391API.Models.Product", "Product")
                        .WithMany("QuotationTemps")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_quotation_temp_product");

                    b.HasOne("SWP391API.Models.User", "User")
                        .WithMany("QuotationTemps")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_quotation_temp_user");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWP391API.Models.User", b =>
                {
                    b.HasOne("SWP391API.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__user__role_id__7A672E12");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SWP391API.Models.ArticleType", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("SWP391API.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SWP391API.Models.CompletedProject", b =>
                {
                    b.Navigation("ProductInProjects");
                });

            modelBuilder.Entity("SWP391API.Models.ConstructionStyle", b =>
                {
                    b.Navigation("QuotationCeilingConstructs");

                    b.Navigation("QuotationFloorConstructions");

                    b.Navigation("QuotationWallConstructs");
                });

            modelBuilder.Entity("SWP391API.Models.HomeStyle", b =>
                {
                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("SWP391API.Models.Product", b =>
                {
                    b.Navigation("ProductInProjects");

                    b.Navigation("QuotationDetails");

                    b.Navigation("QuotationTemps");
                });

            modelBuilder.Entity("SWP391API.Models.Quotation", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("QuotationDetails");
                });

            modelBuilder.Entity("SWP391API.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SWP391API.Models.Style", b =>
                {
                    b.Navigation("CompletedProjects");

                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("SWP391API.Models.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("CompletedProjects");

                    b.Navigation("Products");

                    b.Navigation("QuotationTemps");

                    b.Navigation("Quotations");
                });
#pragma warning restore 612, 618
        }
    }
}
